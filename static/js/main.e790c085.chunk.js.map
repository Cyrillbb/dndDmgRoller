{"version":3,"sources":["modal.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Modal","props","className","id","tabIndex","role","aria-labelledby","aria-hidden","type","data-dismiss","aria-label","roll","App","useState","abMod","profBon","otherBon","wpnMax","wpnMin","state","setState","rollResult","setRollResult","style","htmlFor","onChange","e","parseInt","target","value","data-toggle","data-target","onClick","Math","ceil","random","console","log","floor","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iMAuBeA,EArBD,SAACC,GAAD,OACV,yBAAKC,UAAU,aAAaC,GAAG,QAAQC,SAAS,KAAKC,KAAK,SAASC,kBAAgB,oBAAoBC,cAAY,QACrH,yBAAKL,UAAU,eAAeG,KAAK,YACjC,yBAAKH,UAAU,iBACb,yBAAKA,UAAU,gBACb,wBAAIA,UAAU,cAAcC,GAAG,qBAA/B,eACA,4BAAQK,KAAK,SAASN,UAAU,QAAQO,eAAa,QAAQC,aAAW,SACtE,0BAAMH,cAAY,QAAlB,UAGJ,yBAAKL,UAAU,cAAf,cACcD,EAAMU,MAEpB,yBAAKT,UAAU,gBACb,4BAAQM,KAAK,SAASN,UAAU,iBAAiBO,eAAa,SAA9D,cCiEOG,MA9Ef,WAAgB,IAAD,EACeC,mBAAS,CAC/BC,MAAO,EACPC,QAAS,EACTC,SAAU,EACVC,OAAQ,EACRC,OAAQ,IAND,mBACJC,EADI,KACGC,EADH,OAQyBP,mBAAS,GARlC,mBAQJQ,EARI,KAQQC,EARR,KAyBX,OACI,yBAAMpB,UAAU,sBAAsBqB,MAAO,CAAE,OAAU,UACrD,yBAAKrB,UAAU,iCACX,0BAAMA,UAAU,wBAAhB,iCAEJ,0BAAMA,UAAU,YAAYqB,MAAO,CAAE,OAAU,SAAU,SAAY,UACjE,yBAAKrB,UAAU,SACX,2BAAOsB,QAAQ,aAAatB,UAAU,cAAtC,6BACA,2BAAOM,KAAK,SAASL,GAAG,aAAaD,UAAU,eAC3CuB,SAAU,SAAAC,GAAC,OAAIN,EAAS,2BAAKD,GAAN,IAAaL,MAAOa,SAASD,EAAEE,OAAOC,aACjE,2BAAOL,QAAQ,UAAUtB,UAAU,cAAnC,8BACA,2BAAOM,KAAK,SAASL,GAAG,UAAUD,UAAU,eACxCuB,SAAU,SAAAC,GAAC,OAAIN,EAAS,2BAAKD,GAAN,IAAaJ,QAASY,SAASD,EAAEE,OAAOC,aACnE,2BAAOL,QAAQ,WAAWtB,UAAU,cAApC,0BACA,2BAAOM,KAAK,SAASL,GAAG,WAAWD,UAAU,eACzCuB,SAAU,SAAAC,GAAC,OAAIN,EAAS,2BAAKD,GAAN,IAAaH,SAAUW,SAASD,EAAEE,OAAOC,aACpE,2BAAOL,QAAQ,YAAYtB,UAAU,cAArC,kBACA,2BAAOM,KAAK,SAASL,GAAG,aAAaD,UAAU,eAC3CuB,SAAU,SAAAC,GAAC,OAAIN,EAAS,2BAAKD,GAAN,IAAaF,OAAQU,SAASD,EAAEE,OAAOC,aAClE,2BAAOL,QAAQ,YAAYtB,UAAU,cAArC,kBACA,2BAAOM,KAAK,SAASL,GAAG,aAAaD,UAAU,eAC3CuB,SAAU,SAAAC,GAAC,OAAIN,EAAS,2BAAKD,GAAN,IAAaD,OAAQS,SAASD,EAAEE,OAAOC,aAClE,4BAAQrB,KAAK,SAASN,UAAU,sBAAsB4B,cAAY,QAAQC,cAAY,SAClFC,QAtCK,WACrB,IAAIrB,EAAOsB,KAAKC,KAAqB,GAAhBD,KAAKE,UACb,KAATxB,EAAaW,EAAc,iBACb,IAATX,EAAYW,EAAc,kBAC1BX,EAAOQ,EAAML,MAAQK,EAAMJ,QAAU,GAAIO,EAAc,IAC3DA,EAAcX,EAAOQ,EAAML,MAAQK,EAAMJ,SAC9CqB,QAAQC,IAAIlB,KA+BA,eAIA,4BAAQX,KAAK,SAASN,UAAU,sBAAsB4B,cAAY,QAAQC,cAAY,SACtFC,QAjCS,WACrB,IAAIrB,EAAOsB,KAAKK,MAAML,KAAKE,UAAYhB,EAAMF,OAASE,EAAMD,OAAS,IAAMC,EAAMD,OACjFI,EAAcX,EAAOQ,EAAML,MAAQK,EAAMH,UACzCoB,QAAQC,IAAIlB,KA6BA,YAIA,4BAAQX,KAAK,SAASN,UAAU,sBAAsB4B,cAAY,QAAQC,cAAY,SACtFC,QAAS,kBAAMV,EAAcW,KAAKC,KAAqB,GAAhBD,KAAKE,aAD5C,YAIA,4BAAQ3B,KAAK,SAASN,UAAU,sBAAsB4B,cAAY,QAAQC,cAAY,SACtFC,QAAS,kBAAMV,EAAcW,KAAKC,KAAqB,GAAhBD,KAAKE,aAD5C,YAIA,4BAAQ3B,KAAK,SAASN,UAAU,sBAAsB4B,cAAY,QAAQC,cAAY,SACtFC,QAAS,kBAAMV,EAAcW,KAAKC,KAAqB,EAAhBD,KAAKE,aAD5C,WAIA,4BAAQ3B,KAAK,SAASN,UAAU,sBAAsB4B,cAAY,QAAQC,cAAY,SACtFC,QAAS,kBAAMV,EAAcW,KAAKC,KAAqB,EAAhBD,KAAKE,aAD5C,aAMR,kBAAC,EAAD,CAAOxB,KAAMU,MChELkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,a","file":"static/js/main.e790c085.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Modal = (props) => (\r\n    <div className=\"modal fade\" id=\"Modal\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\r\n  <div className=\"modal-dialog\" role=\"document\">\r\n    <div className=\"modal-content\">\r\n      <div className=\"modal-header\">\r\n        <h5 className=\"modal-title\" id=\"exampleModalLabel\">Roll result</h5>\r\n        <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n          <span aria-hidden=\"true\">&times;</span>\r\n        </button>\r\n      </div>\r\n      <div className=\"modal-body\">\r\n        You rolled {props.roll}\r\n      </div>\r\n      <div className=\"modal-footer\">\r\n        <button type=\"button\" className=\"btn btn-danger\" data-dismiss=\"modal\">Close</button>        \r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n);\r\n\r\nexport default Modal;","import React, { useState } from 'react';\r\nimport Modal from './modal';\r\n\r\nfunction App() {\r\n    const [state, setState] = useState({\r\n        abMod: 0,\r\n        profBon: 0,\r\n        otherBon: 0,\r\n        wpnMax: 0,\r\n        wpnMin: 0,\r\n    })\r\n    const [rollResult, setRollResult] = useState(0)\r\n\r\n    const handleAttackRoll = () => {\r\n        let roll = Math.ceil(Math.random() * 20)\r\n        if (roll === 20) setRollResult('Critical hit!')\r\n        else if (roll === 1) setRollResult('Critical miss!')\r\n        else if (roll + state.abMod + state.profBon > 20) setRollResult(20)\r\n        else setRollResult(roll + state.abMod + state.profBon)\r\n        console.log(state)\r\n    }\r\n\r\n    const handleDamageRoll = () => {\r\n        let roll = Math.floor(Math.random() * (state.wpnMax - state.wpnMin + 1)) + state.wpnMin;\r\n        setRollResult(roll + state.abMod + state.otherBon)\r\n        console.log(state)\r\n    }\r\n\r\n    return (\r\n        < div className='text-center bg-dark' style={{ 'height': '100vh' }} >\r\n            <nav className=\"navbar navbar-dark bg-primary\">\r\n                <span className=\"navbar-brand mb-0 h1\">Simple dnd attack calculator</span>\r\n            </nav>\r\n            <form className='w-75 p-3 ' style={{ 'margin': '0 auto', 'maxWidth': '600px' }}>\r\n                <div className='form-'>\r\n                    <label htmlFor=\"abilityMod\" className='text-light'>Enter ur ability modifier</label>\r\n                    <input type=\"number\" id='abilityMod' className='form-control'\r\n                        onChange={e => setState({ ...state, abMod: parseInt(e.target.value) })} />\r\n                    <label htmlFor=\"profBon\" className='text-light'>Enter ur PROFICIENCY BONUS</label>\r\n                    <input type=\"number\" id='profBon' className='form-control'\r\n                        onChange={e => setState({ ...state, profBon: parseInt(e.target.value) })} />\r\n                    <label htmlFor=\"otherBon\" className='text-light'>Enter ur other bonuses</label>\r\n                    <input type=\"number\" id='otherBon' className='form-control'\r\n                        onChange={e => setState({ ...state, otherBon: parseInt(e.target.value) })} />\r\n                    <label htmlFor=\"wpnMinDmg\" className='text-light'>Weapon min dmg</label>\r\n                    <input type=\"number\" id='wpnMinDmgn' className='form-control'\r\n                        onChange={e => setState({ ...state, wpnMax: parseInt(e.target.value) })} />\r\n                    <label htmlFor=\"wpnMaxDmg\" className='text-light'>Weapon max dmg</label>\r\n                    <input type=\"number\" id='wpnMaxDmgn' className='form-control'\r\n                        onChange={e => setState({ ...state, wpnMin: parseInt(e.target.value) })} />\r\n                    <button type=\"button\" className=\"btn btn-primary m-1\" data-toggle=\"modal\" data-target=\"#Modal\"\r\n                        onClick={handleAttackRoll}>\r\n                        Attack Roll\r\n                    </button>\r\n                    <button type=\"button\" className=\"btn btn-primary m-1\" data-toggle=\"modal\" data-target=\"#Modal\"\r\n                    onClick={handleDamageRoll}>\r\n                        DMG roll\r\n                    </button>\r\n                    <button type=\"button\" className=\"btn btn-primary m-1\" data-toggle=\"modal\" data-target=\"#Modal\"\r\n                    onClick={() => setRollResult(Math.ceil(Math.random() * 10))}>\r\n                        Roll d10\r\n                    </button>\r\n                    <button type=\"button\" className=\"btn btn-primary m-1\" data-toggle=\"modal\" data-target=\"#Modal\"\r\n                    onClick={() => setRollResult(Math.ceil(Math.random() * 20))}>\r\n                        Roll d20\r\n                    </button>\r\n                    <button type=\"button\" className=\"btn btn-primary m-1\" data-toggle=\"modal\" data-target=\"#Modal\"\r\n                    onClick={() => setRollResult(Math.ceil(Math.random() * 8))}>\r\n                        Roll d8\r\n                    </button>\r\n                    <button type=\"button\" className=\"btn btn-primary m-1\" data-toggle=\"modal\" data-target=\"#Modal\"\r\n                    onClick={() => setRollResult(Math.ceil(Math.random() * 4))}>\r\n                        Roll d4\r\n                    </button>                    \r\n                </div>\r\n            </form>\r\n            <Modal roll={rollResult} />\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}